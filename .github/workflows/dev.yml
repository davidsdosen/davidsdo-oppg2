# workflow for dev envorinment
# activates on pushing to dev branch
name: Dev Workflow

# defining the trigger for the workflow.
# this workflow will start if you push to the dev branch
on:
  push:
    branches:
      - dev

jobs:
  terraform:
    name: Terraform Deploy - Dev
    runs-on: ubuntu-latest

    # set environment variables globally for the job
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    # set the working directory for all steps
    defaults:
      run:
        working-directory: ./deployments

    steps:
      # step to check out the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # step to set up Terraform for the job
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      # runs 'terraform fmt' to check that all Terraform files are correctly formatted
      - name: 'Terraform Format'
        run: terraform fmt -check -recursive

      # step to initialize Terraform
      - name: Terraform Init
        run: terraform init
      
      # select or create a workspace for the dev environment if it doesn't exist
      - name: Terraform workspace select or create dev
        run: terraform workspace select dev || terraform workspace new dev
      
      # checks whether the configuration is valid
      - name: 'Terraform Validate'
        run: terraform validate

      # linting Terraform files to catch possible errors using latest tflint version
      - uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      # step to run tfsec for security analysis of the Terraform code
      - name: Run tfsec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      

       # step to create an execution plan for the changes to be applied using the dev tfvars file
      - name: Terraform Plan
        run: terraform plan -var-file=terraform.tfvars.dev -out=tfplan

      # Apply the changes only if the commit message contains "devdeploy"
      - name: Terraform Apply
        if: contains(github.event.head_commit.message, 'devdeploy')
        run: terraform apply -auto-approve tfplan

      # Step to automatically create and merge PR from dev to staging if all tests pass
      - name: Auto Merge Dev into Staging
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # runs to create a pull request if one doesn't already exist and auto-merge its changes
        run: |
          gh pr create --base staging --head dev --title "Auto-merge Dev to Staging" --body "Automatically merging dev into staging" || echo "PR already exists"
          gh pr merge --admin --squash || echo "PR merge pending checks or already merged"