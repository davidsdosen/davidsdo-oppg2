# Workflow for staging envorinment/branch
name: Staging Workflow

# this workflow automatically starts when the merge from dev to staging is completed
on:
  pull_request:
    types: [closed]            # Triggers the workflow only when the PR is closed
    branches:
      - staging                # Only trigger when the PR targets the staging branch

#on:
#  workflow_run:
#    workflows: ["Dev Workflow"]                   # listens to the completion of this workflow
#    types:
#      - completed                                 # triggers when the workflow is completed
#    branches:
#      - dev                                       # listens to the workflow completion only if it's run on the dev branch

jobs:
  terraform:
    name: Terraform Deploy - Staging
    runs-on: ubuntu-latest

    # defines envorinment global variables for the job
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    # set the working directory for all steps
    defaults:
      run:
        working-directory: ./deployments

    steps:
      # check out the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # step to set up Terraform for the job
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      # runs 'terraform fmt' to check that all Terraform files are correctly formatted
      - name: 'Terraform Format'
        run: terraform fmt -check -recursive
      
      # initialize Terraform
      - name: Terraform Init
        run: terraform init

      # select or create a workspace for the staging environment if it doesn't exist
      - name: Terraform workspace select or create staging
        run: terraform workspace select staging || terraform workspace new staging
        
      # checks whether the configuration is valid
      - name: 'Terraform Validate'
        run: terraform validate

      # linting Terraform files to catch possible errors using latest tflint version
      - uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      # creates an execution plan for the changes using the stagings tfvars file
      - name: Terraform Plan
        run: terraform plan -var-file=terraform.tfvars.staging -out=tfplan
      
        # apply the changes
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

        # Step to automatically create and merge PR from staging to dev if all tests pass
      - name: Auto Merge Staging into Prod
        if: success()
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # runs to create a pull request if one doesn't already exist and auto-merge its changes
        run: |
          gh pr create --base prod --head staging --title "Auto-merge Dev to Staging" --body "Automatically merging dev into staging" || echo "PR already exists"
          gh pr merge --admin --squash || echo "PR merge pending checks or already merged"