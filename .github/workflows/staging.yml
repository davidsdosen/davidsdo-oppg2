# Workflow for staging envorinment/branch
name: Staging Workflow

# Specifies the events that will trigger the workflow. In this case, it will trigger when the Dev Workflow is completed and the branch it completed on is dev. 
on:
  workflow_run:
    workflows: ["Dev Workflow"]                    
    types:
      - completed
    branches:
      - dev

jobs:
  terraform:
    name: Terraform Deploy - Staging
    runs-on: ubuntu-latest
    environment: staging  

    # defines envorinment global variables for the job
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    # set the working directory for all steps
    defaults:
      run:
        working-directory: ./deployments

    steps:
      # check out the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0              # Fetches the entire history
          ref: staging                # Ensures you are on the correct branch

      # step to set up Terraform for the job
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      # runs 'terraform fmt' to check that all Terraform files are correctly formatted
      - name: 'Terraform Format'
        run: terraform fmt -check -recursive
      
      # initialize Terraform
      - name: Terraform Init
        run: terraform init

      # select or create a workspace for the staging environment if it doesn't exist
      - name: Terraform workspace select or create staging
        run: terraform workspace select staging || terraform workspace new staging
        
      # checks whether the configuration is valid
      - name: 'Terraform Validate'
        run: terraform validate

      # linting Terraform files to catch possible errors using latest tflint version
      - uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      # creates an execution plan for the changes using the stagings tfvars file
      - name: Terraform Plan
        run: terraform plan -var-file=terraform.tfvars.staging -out=tfplan
      
        # apply the changes
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Auto Merge Staging into Prod
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # First sets the Git committer's identity to the GitHub Actions bot and fetches the prod branch
        # Checks out the prod branch and merges the staging branch into it
        # The --no-ff flag ensures a merge commit is created, and the -X theirs flag resolves any conflicts in favor of the staging branch
        # After the merge is complete, the changes are pushed to the prod branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git fetch origin prod:prod
          git checkout prod
          git merge --no-ff --allow-unrelated-histories -X theirs staging -m "Merging staging into prod"
          git push https://github.com/davidsdosen/davidsdo-oppg2.git HEAD:prod || echo "No changes to push"
